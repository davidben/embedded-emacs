env = Environment()
def CheckPKGConfig(context, version):
    context.Message( 'Checking for pkg-config... ' )
    ret = context.TryAction('pkg-config --atleast-pkgconfig-version=%s' % version)[0]
    context.Result( ret )
    return ret

def CheckPKG(context, name):
    context.Message( 'Checking for %s... ' % name )
    ret = context.TryAction('pkg-config --exists \'%s\'' % name)[0]
    context.Result( ret )
    return ret

conf = Configure(env, custom_tests = { 'CheckPKGConfig' : CheckPKGConfig,
                                       'CheckPKG' : CheckPKG })
if not conf.CheckPKGConfig('0.15.0'):
    print 'pkg-config >= 0.15.0 not found.'
    Exit(1)
if not conf.CheckPKG('glib-2.0'):
    print 'GLib not found.'
    Exit(1)
if not conf.CheckPKG('gthread-2.0'):
    print 'GLib not found.'
    Exit(1)
env = conf.Finish()

# Allow includes relative to the top-level directory.
env.Append(CPPPATH=['.'])
# Hide symbols unless told otherwise.
env.Append(CCFLAGS=['-fvisibility=hidden', '-fvisibility-inlines-hidden'])

# Only pull in the header files; link against NSPR later if needbe.
env.ParseConfig('pkg-config --cflags --libs glib-2.0')
env.ParseConfig('pkg-config --cflags --libs gthread-2.0')

base_files = ['npapi-cxx/browser.cc',
              'npapi-cxx/message_proxy.cc',
              'npapi-cxx/plugin.cc',
              'npapi-cxx/plugin_instance.cc',
              'npapi-cxx/script_object.cc',
              'npapi-cxx/task.cc',
              ]

env.SharedLibrary('emacs-npapi', base_files + \
                      ['command_template.cc',
                       'emacs_instance.cc',
                       'emacs_object.cc',
                       'emacs_plugin.cc',
                       'identifiers.cc',
                       'process_watcher.cc',
                       ])
